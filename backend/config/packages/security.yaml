security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # Provider for regular users
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # Provider for restaurant users
        restaurant_provider:
            entity:
                class: App\Entity\Restaurant
                property: email
        # Chain provider to check both user types for API token validation
        chain_provider:
            chain:
                providers: [app_user_provider, restaurant_provider]
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # Firewall for User login
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login
                username_path: email
                provider: app_user_provider
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        # Firewall for Restaurant login (New)
        restaurant_login:
            pattern: ^/api/restaurant/login
            json_login:
                check_path: /api/restaurant/login
                username_path: email
                provider: restaurant_provider
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        # General API Firewall - validates JWTs from either user type
        api:
            pattern: ^/api
            stateless: true
            provider: chain_provider
            jwt: ~

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true


    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Order matters: More specific paths first
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/auth/register/user, roles: PUBLIC_ACCESS }
        - { path: ^/api/restaurant/login, roles: PUBLIC_ACCESS } # Added restaurant login path
        - { path: ^/api/auth/register/restaurant, roles: PUBLIC_ACCESS }
        - { path: ^/api/food-types, roles: PUBLIC_ACCESS }
        - { path: ^/api/restaurants, roles: PUBLIC_ACCESS }
        # Secure the rest of the API
        - { path: ^/api, roles: [IS_AUTHENTICATED_FULLY] }
        - { path: ^/, roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
