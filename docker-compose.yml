services:
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    environment:
      - CHOKIDAR_USEPOLLING=true
    ports:
      - 5173:5173
    volumes:
      - ./frontend:/app
    networks:
      - beru-network
  backend:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    volumes:
      - ./backend:/var/www/backend:rw
    depends_on:
      database:
        condition: service_healthy
    environment:
      DB_DRIVER: pdo_mysql
      DB_HOST: database
      DB_PORT: 3306
      DB_NAME: ${MYSQL_DATABASE}
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      DB_SERVER_VERSION: '8.0'
      APP_ENV: ${APP_ENV:-dev}
      APP_SECRET: ${APP_SECRET:-change_me_in_dotenv}
      TZ: Europe/Madrid
    ports:
      - 9000:9000
    networks:
      - beru-network
  database:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      TZ: Europe/Madrid
    ports:
      - 3306:3306
    volumes:
      - database_data:/var/lib/mysql
    networks:
      - beru-network
    healthcheck:
        test: ["CMD-SHELL", "mysqladmin ping -h localhost -u$$MYSQL_USER -p$$MYSQL_PASSWORD"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 30s
    command: --default-authentication-plugin=caching_sha2_password
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    ports:
      - "8081:80"
    environment:
      PMA_HOST: database
      PMA_USER: ${MYSQL_USER}
      PMA_PASSWORD: ${MYSQL_PASSWORD}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - beru-network
  nginx:
    build:
      context: docker/nginx
    restart: always
    volumes:
      - ./docker/nginx/logs:/var/log/nginx
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./backend:/var/www/backend:ro
      - ./docker/nginx/certs:/etc/nginx/certs
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - beru-network
networks:
  beru-network:
    driver: bridge
    name: beru-network
volumes:
  database_data:
